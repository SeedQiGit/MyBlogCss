
@{
    Layout = null;
}

<!DOCTYPE html>
<!-- saved from url=(0046)https://www.cnblogs.com/qixinbo/p/8520314.html -->
<html lang="zh-cn">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>C#进阶之路（四）：拉姆达 - SeedQi - 博客园</title>
    <script src="~/Script/jquery-2.2.0.min.js"></script>
    <script src="~/js/MyBlog.js"></script>
    <link href="~/Css/blog-common.css" rel="stylesheet" />
    <link href="~/Css/BlogCssCommon.css" rel="stylesheet" />
    <link href="~/Css/BlogCssHeader.css" rel="stylesheet" />
    <link href="~/Css/BlogCssBody.css" rel="stylesheet" />
    <link href="~/Css/BlogCssSideBar.css" rel="stylesheet" />
</head>
<body>
    <a name="top"></a>
    <!--done-->
    <div id="home">
        <div id="header">
            <div id="blogTitle">
                <a id="lnkBlogLogo" href="http://www.cnblogs.com/qixinbo/"><img id="blogLogo" src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/logo.gif" alt="返回主页"></a>

                <!--done-->
                <h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/qixinbo/">SeedQi</a></h1>
                <h2>用心完成每一篇文字，真心对待每一天生活。</h2>
            </div><!--end: blogTitle 博客的标题和副标题 -->
            <div id="navigator">

                <ul id="navList">
                    <li></li>
                    <li><a id="blog_nav_myhome" class="menu" href="http://www.cnblogs.com/qixinbo/">首页</a></li>
                    <li></li>
                    <li></li>
                    <li>
                        <!---->
                    </li>
                    <li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
                </ul>
                <div class="blogStats">

                    <div id="blog_stats">
                        <span id="stats_post_count">随笔 - 64&nbsp; </span>
                        <span id="stats_article_count">文章 - 0&nbsp; </span>
                        <span id="stats-comment_count">评论 - 0</span>
                    </div>

                </div><!--end: blogStats -->
            </div><!--end: navigator 博客导航栏 -->
        </div><!--end: header 头部 -->

        <div id="main">
            <div id="mainContent">
                <div class="forFlow">

                    <div id="post_detail">
                        <!--done-->
                        <div id="topics">
                            <div class="post">
                                <h1 class="postTitle">
                                    <a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/qixinbo/p/8520314.html">C#进阶之路（四）：拉姆达</a>
                                </h1>
                                <div class="clear"></div>
                                <div class="postBody">
                                    <div id="cnblogs_post_body" class="blogpost-body">
                                        <p>&nbsp;<span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">对于拉姆达，许多文章都讲过原理及如何使用，所以这篇文章我主要是摘录我学习过的文字，总结下我自己的学习心得。</span></p>
                                        <p>
                                            <span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">
                                                <img src="~/img/1139419-20180524153513539-2115352320.jpg" width="118" height="118" />
                                            </span>
                                        </p>
                                        <h3><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">什么是拉姆达表达式</span></h3>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">　　"Lambda表达式"是一个匿名函数，是一种高效的类似于函数式编程的表达式，Lambda简化了开发中需要编写的代码量。它可以包含表达式和语句，并且可用于创建委托或表达式目录树类型，支持带有可绑定到委托或表达式树的输入参数的内联表达式。所有Lambda表达式都使用Lambda运算符=&gt;，该运算符读作"goes to"。Lambda运算符的左边是输入参数(如果有)，右边是表达式或语句块。</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lambda表达式Lambda表达式是由.NET 2.0演化而来的，也是LINQ的基础，熟练地掌握Lambda表达式能够快速地上手LINQ应用开发。</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">Lambda表达式在一定程度上就是匿名方法的另一种表现形式</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;">匿名方法 </span>
<span style="color: #000000;">
IEnumerable</span>&lt;People&gt; results =<span style="color: #000000;"> people.Where

(</span><span style="color: #0000ff;">delegate</span>(People p) { <span style="color: #0000ff;">return</span> p.age &gt; <span style="color: #800080;">20</span><span style="color: #000000;">; });

</span><span style="color: #008000;">//</span><span style="color: #008000;">拉姆达表达式</span>
<span style="color: #000000;">
IEnumerable</span>&lt;People&gt; results = people.Where(People =&gt; People.age &gt; <span style="color: #800080;">20</span>);</pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <h3><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">使用示例</span></h3>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre>(x, y) =&gt; x * y         <span style="color: #008000;">//</span><span style="color: #008000;">多参数，隐式类型=&gt; 表达式 </span>
<span style="color: #000000;">
x </span>=&gt; x * <span style="color: #800080;">5</span>              <span style="color: #008000;">//</span><span style="color: #008000;">单参数， 隐式类型=&gt;表达式 </span>
<span style="color: #000000;">
x </span>=&gt; { <span style="color: #0000ff;">return</span> x * <span style="color: #800080;">5</span>; }      <span style="color: #008000;">//</span><span style="color: #008000;">单参数，隐式类型=&gt;语句块 </span>
<span style="color: #000000;">
(</span><span style="color: #0000ff;">int</span> x) =&gt; x * <span style="color: #800080;">5</span>            <span style="color: #008000;">//</span><span style="color: #008000;">单参数，显式类型=&gt;表达式 </span>
<span style="color: #000000;">
(</span><span style="color: #0000ff;">int</span> x) =&gt; { <span style="color: #0000ff;">return</span> x * <span style="color: #800080;">5</span>; }      <span style="color: #008000;">//</span><span style="color: #008000;">单参数，显式类型=&gt;语句块 </span>
<span style="color: #000000;">
() </span>=&gt; Console.WriteLine()   <span style="color: #008000;">//</span><span style="color: #008000;">无参数</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">以上述格式都是Lambda表达式的合法格式，在编写Lambda表达式时，可以忽略参数的类型，因为编译器能够根据上下文直接推断参数的类型。</span></p>
                                        <h3><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">Lambda的进阶用法</span></h3>
                                        <h4><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">一、闭包</span></h4>
                                        <div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> a = <span style="color: #800080;">5</span><span style="color: #000000;">;
Func</span>&lt;<span style="color: #0000ff;">int</span>,<span style="color: #0000ff;">int</span>&gt; multiplyWith = x =&gt; x *<span style="color: #000000;"> a;
</span><span style="color: #0000ff;">var</span> result1 = multiplyWith(<span style="color: #800080;">10</span>); <span style="color: #008000;">//</span><span style="color: #008000;">50</span><span style="color: #000000;">
a </span>= <span style="color: #800080;">10</span><span style="color: #000000;">;
</span><span style="color: #0000ff;">var</span> result2 = multiplyWith(<span style="color: #800080;">10</span>); <span style="color: #008000;">//</span><span style="color: #008000;">100</span></pre>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">我们可以在Lambda表达式中用到外面的变量，没错，也就是传说中的闭包啦。</span></p>
                                        <div class="cnblogs_code" onclick="cnblogs_code_show(&#39;1bdfcb3a-3374-4839-ae23-1ced0fc21f0b&#39;)">
                                            <img id="code_img_closed_1bdfcb3a-3374-4839-ae23-1ced0fc21f0b" class="code_img_closed" src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/ContractedBlock.gif" alt=""><img id="code_img_opened_1bdfcb3a-3374-4839-ae23-1ced0fc21f0b" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide(&#39;1bdfcb3a-3374-4839-ae23-1ced0fc21f0b&#39;,event)" src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/ExpandedBlockStart.gif" alt="">
                                            <div id="cnblogs_code_open_1bdfcb3a-3374-4839-ae23-1ced0fc21f0b" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">void</span><span style="color: #000000;"> DoSomeStuff()
{
    </span><span style="color: #0000ff;">var</span> coeff = <span style="color: #800080;">10</span><span style="color: #000000;">;
    Func</span>&lt;<span style="color: #0000ff;">int</span>,<span style="color: #0000ff;">int</span>&gt; compute = x =&gt; coeff *<span style="color: #000000;"> x;
    Action modifier </span>= () =&gt;<span style="color: #000000;">
    {
        coeff </span>= <span style="color: #800080;">5</span><span style="color: #000000;">;
    };
    </span><span style="color: #0000ff;">var</span> result1 =<span style="color: #000000;"> DoMoreStuff(compute);
    ModifyStuff(modifier);
    </span><span style="color: #0000ff;">var</span> result2 =<span style="color: #000000;"> DoMoreStuff(compute);
}
</span><span style="color: #0000ff;">int</span> DoMoreStuff(Func&lt;<span style="color: #0000ff;">int</span>,<span style="color: #0000ff;">int</span>&gt;<span style="color: #000000;"> computer)
{
    </span><span style="color: #0000ff;">return</span> computer(<span style="color: #800080;">5</span><span style="color: #000000;">);
}
</span><span style="color: #0000ff;">void</span><span style="color: #000000;"> ModifyStuff(Action modifier)
{
    modifier();
}</span></pre>
                                            </div>
                                            <span class="cnblogs_code_collapse">View Code</span>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">　　在上面的代码中，DoSomeStuff方法里面的变量coeff实际是由外部方法ModifyStuff修改的，也就是说ModifyStuff这个方法拥有了访问DoSomeStuff里面一个局部变量的能力。它是如何做到的？我们马上会说的J。当然，这个变量作用域的问题也是在使用闭包时应该注意的地方，稍有不慎就有可能会引发你想不到的后果。看看下面这个你就知道了。</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">var</span> buttons = <span style="color: #0000ff;">new</span> Button[<span style="color: #800080;">10</span><span style="color: #000000;">];
</span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i = <span style="color: #800080;">0</span>; i &lt; buttons.Length; i++<span style="color: #000000;">)
{
    </span><span style="color: #0000ff;">var</span> button = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Button();
    button.Text </span>= (i + <span style="color: #800080;">1</span>) + <span style="color: #800000;">"</span><span style="color: #800000;">. Button - Click for Index!</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    button.OnClick </span>+= (s, e) =&gt;<span style="color: #000000;"> { Messagebox.Show(i.ToString()); };
    buttons[i] </span>=<span style="color: #000000;"> button;
}</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">猜猜你点击这些按钮的结果是什么？是”1, 2, 3…”。但是，其实真正的结果是全部都显示10。为什么？不明觉历了吧？那么如果避免这种情况呢？</span></p>
                                        <div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> button = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Button();
</span><span style="color: #0000ff;">var</span> index =<span style="color: #000000;"> i;
button.Text </span>= (i + <span style="color: #800080;">1</span>) + <span style="color: #800000;">"</span><span style="color: #800000;">. Button - Click for Index!</span><span style="color: #800000;">"</span><span style="color: #000000;">;
button.OnClick </span>+= (s, e) =&gt;<span style="color: #000000;"> { Messagebox.Show(index.ToString()); };
buttons[i] </span>= button;</pre>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">其实做法很简单，就是在for的循环里面把当前的i保存下来，那么每一个表达式里面存储的值就不一样了。</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">　　当我们的Lambda表达式里面用到了外部变量的时候，编译器会为这个Lambda生成一个类，在这个类中包含了我们表达式方法。在使用这个Lambda表达式的地方呢，实际上是new了这个类的一个实例进行调用。这样的话，我们表达式里面的外部变量，也就是上面代码中用到的local实际上是以一个全局变量的身份存在于这个实例中的。</span></p>
                                        <h4><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">二、表达式Expression</span></h4>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">我们可以用一个Expression将一个Lambda保存起来。并且允许我们在运行时去解释这个Lambda表达式。来看一下下面简单的代码：</span></p>
                                        <div class="cnblogs_code">
<pre>Expression&lt;Func&lt;MyModel, <span style="color: #0000ff;">int</span>&gt;&gt; expr = model =&gt;<span style="color: #000000;"> model.MyProperty;
</span><span style="color: #0000ff;">var</span> member = expr.Body <span style="color: #0000ff;">as</span><span style="color: #000000;"> MemberExpression;
</span><span style="color: #0000ff;">var</span> propertyName = member.Expression.Member.Name;</pre>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">　　这个的确是Expression最简单的用法之一，我们用expr存储了后面的表达式。编译器会为我们生成表达式树，在表达式树中包括了一个元数据像参数的类型，名称还有方法体等等。在LINQ TO SQL中就是通过这种方法将我们设置的条件通过where扩展方法传递给后面的LINQ Provider进行解释的，而LINQ Provider解释的过程实际上就是将表达式树转换成SQL语句的过程。</span></p>
                                        <h3><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">用Lambda表达式实现一些在JavaScript中流行的模式</span></h3>
                                        <h4><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">一、返回方法</span></h4>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">我们在JavaScript中可以直接return一个方法，在.net中虽然不能直接返回方法，但是我们可以返回一个表达式。</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre>Func&lt;<span style="color: #0000ff;">string</span>, <span style="color: #0000ff;">string</span>&gt; SayMyName(<span style="color: #0000ff;">string</span><span style="color: #000000;"> language)
{
    </span><span style="color: #0000ff;">switch</span><span style="color: #000000;">(language.ToLower())
    {
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">fr</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            </span><span style="color: #0000ff;">return</span> name =&gt;<span style="color: #000000;"> {
                </span><span style="color: #0000ff;">return</span> <span style="color: #800000;">"</span><span style="color: #800000;">Je m'appelle </span><span style="color: #800000;">"</span> + name + <span style="color: #800000;">"</span><span style="color: #800000;">.</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            };
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">de</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            </span><span style="color: #0000ff;">return</span> name =&gt;<span style="color: #000000;"> {
                </span><span style="color: #0000ff;">return</span> <span style="color: #800000;">"</span><span style="color: #800000;">Mein Name ist </span><span style="color: #800000;">"</span> + name + <span style="color: #800000;">"</span><span style="color: #800000;">.</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            };
        </span><span style="color: #0000ff;">default</span><span style="color: #000000;">:
            </span><span style="color: #0000ff;">return</span> name =&gt;<span style="color: #000000;"> {
                </span><span style="color: #0000ff;">return</span> <span style="color: #800000;">"</span><span style="color: #800000;">My name is </span><span style="color: #800000;">"</span> + name + <span style="color: #800000;">"</span><span style="color: #800000;">.</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            };
    }
}
</span><span style="color: #0000ff;">void</span><span style="color: #000000;"> Main()
{
    </span><span style="color: #0000ff;">var</span> lang = <span style="color: #800000;">"</span><span style="color: #800000;">de</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    </span><span style="color: #008000;">//</span><span style="color: #008000;">Get language - e.g. by current OS settings</span>
                                            <span style="color: #0000ff;">var</span> smn =<span style="color: #000000;"> SayMyName(lang);
    </span><span style="color: #0000ff;">var</span> name =<span style="color: #000000;"> Console.ReadLine();
    </span><span style="color: #0000ff;">var</span> sentence =<span style="color: #000000;"> smn(name);
    Console.WriteLine(sentence);
}</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">是不是有一种策略模式的感觉？这还不够完美，这一堆的switch case看着就心烦，让我们用Dictionary&lt;TKey,TValue&gt;来简化它。来看看来面这货：</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Translations
{
    </span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> Dictionary&lt;<span style="color: #0000ff;">string</span>, Func&lt;<span style="color: #0000ff;">string</span>, <span style="color: #0000ff;">string</span>&gt;&gt; smnFunctions = <span style="color: #0000ff;">new</span> Dictionary&lt;<span style="color: #0000ff;">string</span>, Func&lt;<span style="color: #0000ff;">string</span>, <span style="color: #0000ff;">string</span>&gt;&gt;<span style="color: #000000;">();
    </span><span style="color: #0000ff;">static</span><span style="color: #000000;"> Translations()
    {
        smnFunctions.Add(</span><span style="color: #800000;">"</span><span style="color: #800000;">fr</span><span style="color: #800000;">"</span>, name =&gt; <span style="color: #800000;">"</span><span style="color: #800000;">Je m'appelle </span><span style="color: #800000;">"</span> + name + <span style="color: #800000;">"</span><span style="color: #800000;">.</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        smnFunctions.Add(</span><span style="color: #800000;">"</span><span style="color: #800000;">de</span><span style="color: #800000;">"</span>, name =&gt; <span style="color: #800000;">"</span><span style="color: #800000;">Mein Name ist </span><span style="color: #800000;">"</span> + name + <span style="color: #800000;">"</span><span style="color: #800000;">.</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        smnFunctions.Add(</span><span style="color: #800000;">"</span><span style="color: #800000;">en</span><span style="color: #800000;">"</span>, name =&gt; <span style="color: #800000;">"</span><span style="color: #800000;">My name is </span><span style="color: #800000;">"</span> + name + <span style="color: #800000;">"</span><span style="color: #800000;">.</span><span style="color: #800000;">"</span><span style="color: #000000;">);
    }
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> Func&lt;<span style="color: #0000ff;">string</span>, <span style="color: #0000ff;">string</span>&gt; GetSayMyName(<span style="color: #0000ff;">string</span><span style="color: #000000;"> language)
    {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">Check if the language is available has been omitted on purpose</span>
                                            <span style="color: #0000ff;">return</span><span style="color: #000000;"> smnFunctions[language];
    }
}</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <h4><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">二、自定义型方法</span></h4>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">自定义型方法在JavaScript中比较常见，主要实现思路是这个方法被设置成一个属性。在给这个属性附值，甚至执行过程中我们可以随时更改这个属性的指向，从而达到改变这个方法的目地。</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">class</span><span style="color: #000000;"> SomeClass
{
    </span><span style="color: #0000ff;">public</span> Func&lt;<span style="color: #0000ff;">int</span>&gt;<span style="color: #000000;"> NextPrime
    {
        </span><span style="color: #0000ff;">get</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">set</span><span style="color: #000000;">;
    }
    </span><span style="color: #0000ff;">int</span><span style="color: #000000;"> prime;
</span><span style="color: #0000ff;">public</span><span style="color: #000000;"> SomeClass()
    {
       NextPrime </span>= () =&gt;<span style="color: #000000;">
        {
            prime </span>= <span style="color: #800080;">2</span><span style="color: #000000;">;
            NextPrime </span>= () =&gt;<span style="color: #000000;"> {
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 这里可以加上 第二次和第二次以后执行NextPrive()的逻辑代码</span>
                                            <span style="color: #0000ff;">return</span><span style="color: #000000;"> prime;
            };
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> prime;
        };
    }
}</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">这里执行可以用</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">SomeClass a = new SomeClass();</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">Console.WriteLine(a.NextPrime());</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">上面的代码中当NextPrime第一次被调用的时候是2，与此同时，我们更改了NextPrime，我们可以把它指向另外的方法，和JavaScrtip的灵活性比起来也不差吧？如果你还不满意 ，那下面的代码应该能满足你。</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre>Action&lt;<span style="color: #0000ff;">int</span>&gt; loopBody = i =&gt;<span style="color: #000000;"> {
    </span><span style="color: #0000ff;">if</span>(i == <span style="color: #800080;">1000</span><span style="color: #000000;">)
        loopBody </span>= <span style="color: #008000;">//</span><span style="color: #008000;">把loopBody指向别的方法</span>
                                            <span style="color: #008000;">/*</span><span style="color: #008000;"> 前10000次执行下面的代码 </span><span style="color: #008000;">*/</span><span style="color: #000000;">
};
</span><span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> j = <span style="color: #800080;">0</span>; j &lt; <span style="color: #800080;">10000000</span>; j++<span style="color: #000000;">)
    loopBody(j);</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">在调用的地方我们不用考虑太多，然后这个方法本身就具有调优性了。我们原来的做法可能是在判断i==1000之后直接写上相应的代码，那么和现在的把该方法指向另外一个方法有什么区别呢？</span></p>
                                        <h4><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">三、自执行方法</span></h4>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">JavaScript 中的自执行方法有以下几个优势：</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">1&nbsp; 不会污染全局环境</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">2&nbsp; 保证自执行里面的方法只会被执行一次</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">3&nbsp; 解释完立即执行</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">在C#中我们也可以有自执行的方法：</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">(() =&gt; {</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">&nbsp;&nbsp;&nbsp; // Do Something here!</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">})();</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">上面的是没有参数的，如果你想要加入参数，也非常的简单：</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre>((<span style="color: #0000ff;">string</span> s, <span style="color: #0000ff;">int</span> no) =&gt;<span style="color: #000000;"> {
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> Do Something here!</span>
})(<span style="color: #800000;">"</span><span style="color: #800000;">Example</span><span style="color: #800000;">"</span>, <span style="color: #800080;">8</span><span style="color: #000000;">);
.NET4.5最闪的新功能是什么？</span><span style="color: #0000ff;">async</span><span style="color: #000000;">？这里也可以
</span><span style="color: #0000ff;">await</span> (<span style="color: #0000ff;">async</span> (<span style="color: #0000ff;">string</span> s, <span style="color: #0000ff;">int</span> no) =&gt;<span style="color: #000000;"> {
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 用Task异步执行这里的代码</span>
})(<span style="color: #800000;">"</span><span style="color: #800000;">Example</span><span style="color: #800000;">"</span>, <span style="color: #800080;">8</span><span style="color: #000000;">);
</span><span style="color: #008000;">//</span><span style="color: #008000;"> 异步Task执行完之后的代码</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <h4><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">四、对象即时初始化</span></h4>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">大家知道.NET为我们提供了匿名对象，这使用我们可以像在JavaScript里面一样随意的创建我们想要对象。但是别忘了，JavaScript里面可以不仅可以放入数据，还可以放入方法，.NET可以么？要相信，Microsoft不会让我们失望的。</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;">Create anonymous object</span>
<span style="color: #0000ff;">var</span> person = <span style="color: #0000ff;">new</span><span style="color: #000000;"> {
    Name </span>= <span style="color: #800000;">"</span><span style="color: #800000;">Jesse</span><span style="color: #800000;">"</span><span style="color: #000000;">,
    Age </span>= <span style="color: #800080;">28</span><span style="color: #000000;">,
    Ask </span>= (<span style="color: #0000ff;">string</span> question) =&gt;<span style="color: #000000;"> {
        Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">The answer to `</span><span style="color: #800000;">"</span> + question + <span style="color: #800000;">"</span><span style="color: #800000;">` is certainly 42!</span><span style="color: #800000;">"</span><span style="color: #000000;">);
    }
};
</span><span style="color: #008000;">//</span><span style="color: #008000;">Execute function</span>
person.Ask(<span style="color: #800000;">"</span><span style="color: #800000;">Why are you doing this?</span><span style="color: #800000;">"</span>);</pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">但是如果你真的是运行这段代码，是会抛出异常的。问题就在这里，Lambda表达式是不允许赋值给匿名对象的。但是委托可以，所以在这里我们只需要告诉编译器，我是一个什么类型的委托即可。</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">var</span> person = <span style="color: #0000ff;">new</span><span style="color: #000000;"> {
    Name </span>= <span style="color: #800000;">"</span><span style="color: #800000;">Florian</span><span style="color: #800000;">"</span><span style="color: #000000;">,
    Age </span>= <span style="color: #800080;">28</span><span style="color: #000000;">,
    Ask </span>= (Action&lt;<span style="color: #0000ff;">string</span>&gt;)((<span style="color: #0000ff;">string</span> question) =&gt;<span style="color: #000000;"> {
        Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">The answer to `</span><span style="color: #800000;">"</span> + question + <span style="color: #800000;">"</span><span style="color: #800000;">` is certainly 42!</span><span style="color: #800000;">"</span><span style="color: #000000;">);
    })
};</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">这时候再调用person.Ask("123");</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">但是这里还有一个问题，如果我想在Ask方法里面去访问person的某一个属性，可以么？</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">var</span> person = <span style="color: #0000ff;">new</span><span style="color: #000000;">
{
Name </span>= <span style="color: #800000;">"</span><span style="color: #800000;">Jesse</span><span style="color: #800000;">"</span><span style="color: #000000;">,
Age </span>= <span style="color: #800080;">18</span><span style="color: #000000;">,
Ask </span>= ((Action&lt;<span style="color: #0000ff;">string</span>&gt;)((<span style="color: #0000ff;">string</span> question) =&gt;<span style="color: #000000;"> {
    Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">The answer to '</span><span style="color: #800000;">"</span> + question + <span style="color: #800000;">"</span><span style="color: #800000;">' is certainly 20. My age is </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> person.Age );
}))
};</span></pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">结果是连编译都通不过，因为person在我们的Lambda表达式这里还是没有定义的，当然不允许使用了，但是在JavaScript里面是没有问题的，怎么办呢？.NET能行么？当然行，既然它要提前定义，我们就提前定义好了。</span></p>
                                        <div class="cnblogs_code">
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">dynamic</span> person = <span style="color: #0000ff;">null</span><span style="color: #000000;">;
person </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> {
    Name </span>= <span style="color: #800000;">"</span><span style="color: #800000;">Jesse</span><span style="color: #800000;">"</span><span style="color: #000000;">,
    Age </span>= <span style="color: #800080;">28</span><span style="color: #000000;">,
    Ask </span>= (Action&lt;<span style="color: #0000ff;">string</span>&gt;)((<span style="color: #0000ff;">string</span> question) =&gt;<span style="color: #000000;"> {
        Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">The answer to `</span><span style="color: #800000;">"</span> + question + <span style="color: #800000;">"</span><span style="color: #800000;">` is certainly 42! My age is </span><span style="color: #800000;">"</span> + person.Age + <span style="color: #800000;">"</span><span style="color: #800000;">.</span><span style="color: #800000;">"</span><span style="color: #000000;">);
    })
};
</span><span style="color: #008000;">//</span><span style="color: #008000;">Execute function</span>
person.Ask(<span style="color: #800000;">"</span><span style="color: #800000;">Why are you doing this?</span><span style="color: #800000;">"</span>);</pre>
                                            <div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/copycode.gif" alt="复制代码"></a></span></div>
                                        </div>
                                        <p>&nbsp;</p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">&nbsp;</span></p>
                                        <p><span style="font-size: 16px; font-family: &#39;Microsoft YaHei&#39;;">&nbsp;</span></p>
                                    </div><div id="MySignature"></div>
                                    <div class="clear"></div>
                                    <div id="blog_post_info_block">
                                        <div id="BlogPostCategory">分类: <a href="http://www.cnblogs.com/qixinbo/category/1007682.html" target="_blank">C#</a></div>
                                        <div id="EntryTag">标签: <a href="http://www.cnblogs.com/qixinbo/tag/C%23%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/">C#进阶之路</a></div>
                                        <div id="blog_post_info">
                                            <div id="green_channel">
                                                <a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(8520314,cb_blogId,1);green_channel_success(this,&#39;谢谢推荐！&#39;);">好文要顶</a>
                                                <a id="green_channel_follow" onclick="follow(&#39;9aafb01c-3018-e711-845c-ac853d9f53ac&#39;);" href="javascript:void(0);">关注我</a>
                                                <a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a>
                                                <a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/icon_weibo_24.png" alt=""></a>
                                                <a id="green_channel_wechat" href="javascript:void(0);" title="分享至微信" onclick="shareOnWechat()"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/wechat.png" alt=""></a>
                                            </div>
                                            <div id="author_profile">
                                                <div id="author_profile_info" class="author_profile_info">
                                                    <a href="http://home.cnblogs.com/u/qixinbo/" target="_blank"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/20170516130732.png" class="author_avatar" alt=""></a>
                                                    <div id="author_profile_detail" class="author_profile_info">
                                                        <a href="http://home.cnblogs.com/u/qixinbo/">SeedQi</a><br>
                                                        <a href="http://home.cnblogs.com/u/qixinbo/followees">关注 - 7</a><br>
                                                        <a href="http://home.cnblogs.com/u/qixinbo/followers">粉丝 - 6</a>
                                                    </div>
                                                </div>
                                                <div class="clear"></div>
                                                <div id="author_profile_honor"></div>
                                                <div id="author_profile_follow">
                                                    <a href="javascript:void(0);" onclick="follow(&#39;9aafb01c-3018-e711-845c-ac853d9f53ac&#39;);return false;">+加关注</a>
                                                </div>
                                            </div>
                                            <div id="div_digg">
                                                <div class="diggit" onclick="votePost(8520314,&#39;Digg&#39;)">
                                                    <span class="diggnum" id="digg_count">0</span>
                                                </div>
                                                <div class="buryit" onclick="votePost(8520314,&#39;Bury&#39;)">
                                                    <span class="burynum" id="bury_count">0</span>
                                                </div>
                                                <div class="clear"></div>
                                                <div class="diggword" id="digg_tips">
                                                </div>
                                            </div>
                                            <script type="text/javascript">
                                                currentDiggType = 0;
                                            </script>
                                        </div>
                                        <div class="clear"></div>
                                        <div id="post_next_prev"><a href="http://www.cnblogs.com/qixinbo/p/8506835.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/qixinbo/p/8506835.html" title="发布于2018-03-04 23:24">SQL夯实基础（五）：索引的数据结构</a><br><a href="http://www.cnblogs.com/qixinbo/p/8648940.html" class="p_n_p_prefix">» </a> 下一篇：<a href="http://www.cnblogs.com/qixinbo/p/8648940.html" title="发布于2018-03-26 09:42">C#进阶之路（五）：Linq初识</a><br></div>
                                    </div>


                                </div>
                                <div class="postDesc">posted <span id="post-date">2018-03-07 08:36</span> <a href="http://www.cnblogs.com/qixinbo/">SeedQi</a> 阅读(<span id="post_view_count">7</span>) 评论(<span id="post_comment_count">0</span>)  <a href="https://i.cnblogs.com/EditPosts.aspx?postid=8520314" rel="nofollow">编辑</a> <a href="https://www.cnblogs.com/qixinbo/p/8520314.html#" onclick="AddToWz(8520314);return false;">收藏</a></div>
                            </div>
                            <script type="text/javascript">var allowComments=true,cb_blogId=355813,cb_entryId=8520314,cb_blogApp=currentBlogApp,cb_blogUserGuid='9aafb01c-3018-e711-845c-ac853d9f53ac',cb_entryCreatedDate='2018/3/7 8:36:00';loadViewCount(cb_entryId);var cb_postType=1;</script>

                        </div><!--end: topics 文章、评论容器-->
                    </div><a name="!comments"></a><div id="blog-comments-placeholder"></div>
                    <script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
                    <div id="comment_form" class="commentform">
                        <a name="commentform"></a>
                        <div id="divCommentShow"></div>
                        <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="https://www.cnblogs.com/qixinbo/p/8520314.html#" onclick="return RefreshPage();">刷新页面</a><a href="https://www.cnblogs.com/qixinbo/p/8520314.html#top">返回顶部</a></div>
                        <div id="comment_form_container"><div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return login(&#39;commentform&#39;);">登录</a> 或 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return register();">注册</a>，<a href="http://www.cnblogs.com/">访问</a>网站首页。</div></div>
                        <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
                        <div id="ad_t2"><a href="http://www.ucancode.com/index.htm" target="_blank">【推荐】超50万VC++源码: 大型组态工控、电力仿真CAD与GIS源码库！</a><br><a href="https://cloud.tencent.com/act/campus/group/index?fromSource=gwzcw.1087490.1087490.1087490" target="_blank" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;click&#39;, &#39;T2-T2-腾讯云&#39;)">【福利】校园拼团福利，腾讯云1核2G云服务器10元/月！</a><br><a href="http://challenge.xfyun.cn/?ch=bk" target="_blank" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;click&#39;, &#39;T2-xfyun&#39;)">【大赛】2018首届“顶天立地”AI开发者大赛</a><br></div>
                        <div id="opt_under_post"></div>
                        <div id="cnblogs_c1" class="c_ad_block"><a href="https://dnspod.cloud.tencent.com/act/yearendsales?from=IT&amp;fromSource=gwzcw.1087492.1087492.1087492" target="_blank"><img width="300" height="250" src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/24442-20180702115226334-1185241560.jpg" alt="qcloud0702" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;click&#39;, &#39;C1&#39;);"></a></div>
                        <div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="https://news.cnblogs.com/n/600852/" target="_blank">映客择路上市始末： A、H的首发估值之争</a><br> ·  <a href="https://news.cnblogs.com/n/600848/" target="_blank">康佳砸下4.5亿出手接盘，新飞能否“新飞”？</a><br> ·  <a href="https://news.cnblogs.com/n/600853/" target="_blank">传Uber与中东竞争对手Careem谈判 或合并业务不再烧钱</a><br> ·  <a href="https://news.cnblogs.com/n/600843/" target="_blank">谷歌网盘app更新：可打开受密码保护的微软Office文档</a><br> ·  <a href="https://news.cnblogs.com/n/600851/" target="_blank">消息称映客IPO定价3.85港元 已超额三倍认购</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
                        <div id="cnblogs_c2" class="c_ad_block"><a href="http://click.aliyun.com/m/9667/" target="_blank"><img src="./C#进阶之路（四）：拉姆达 - SeedQi - 博客园_files/TB1iQKbhqmWBuNjy1XaXXXCbXXa-468-60.jpg" alt="" style="width: 468px; height: 60px;"></a></div>
                        <div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/522513/" target="_blank">如何提升你的能力？给年轻程序员的几条建议</a><br> ·  <a href="http://kb.cnblogs.com/page/553361/" target="_blank">程序员的那些反模式</a><br> ·  <a href="http://kb.cnblogs.com/page/598335/" target="_blank">程序员的宇宙时间线</a><br> ·  <a href="http://kb.cnblogs.com/page/597877/" target="_blank">突破程序员思维</a><br> ·  <a href="http://kb.cnblogs.com/page/597631/" target="_blank">云、雾和霭计算如何一起工作</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
                        <div id="HistoryToday" class="c_ad_block"></div>
                        <script type="text/javascript">
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
                        </script>
                    </div>


                </div><!--end: forFlow -->
            </div><!--end: mainContent 主体内容容器-->

            <div id="sideBar">
                <div id="sideBarMain">

                    <!--done-->
                    <div class="newsItem">
                        <h3 class="catListTitle">公告</h3>
                        <div id="blog-news"><div id="profile_block">昵称：<a href="https://home.cnblogs.com/u/qixinbo/">SeedQi</a><br>园龄：<a href="https://home.cnblogs.com/u/qixinbo/" title="入园时间：2017-04-03">1年3个月</a><br>粉丝：<a href="https://home.cnblogs.com/u/qixinbo/followers/">6</a><br>关注：<a href="https://home.cnblogs.com/u/qixinbo/followees/">7</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="follow(&#39;9aafb01c-3018-e711-845c-ac853d9f53ac&#39;)">+加关注</a></div>
                        <script>getFollowStatus('9aafb01c-3018-e711-845c-ac853d9f53ac')</script></div></div>
                        <script type="text/javascript">loadBlogNews();</script>
                    </div>

                    <div id="blog-calendar" style="display:none"></div>
                    <script type="text/javascript">loadBlogDefaultCalendar();</script>

                    <div id="leftcontentcontainer">
                        <div id="blog-sidecolumn">
                            <div id="sidebar_search" class="sidebar-block">
                                <div id="sidebar_search" class="mySearch">
                                    <h3 class="catListTitle">搜索</h3>
                                    <div id="sidebar_search_box">
                                        <div id="widget_my_zzk" class="div_my_zzk"><input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk">&nbsp;<input onclick="zzk_go()" type="button" value="找找看" id="btnZzk" class="btn_my_zzk"></div>

                                    </div>
                                </div>

                            </div><div id="sidebar_shortcut" class="sidebar-block">
                                <div class="catListLink">
                                    <h3 class="catListTitle">常用链接</h3>
                                    <ul>
                                        <li><a href="http://www.cnblogs.com/qixinbo/p/" title="我的博客的随笔列表">我的随笔</a></li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/MyComments.html" title="我发表过的评论列表">我的评论</a></li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/OtherPosts.html" title="我评论过的随笔列表">我的参与</a></li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/RecentComments.html" title="我的博客的评论列表">最新评论</a></li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/" title="我的博客的标签列表">我的标签</a></li>
                                    </ul>
                                    <div id="itemListLin_con" style="display:none;">
                                        <ul></ul>
                                    </div>
                                </div>
                            </div><div id="sidebar_toptags" class="sidebar-block">
                                <div class="catListTag">
                                    <h3 class="catListTitle">我的标签</h3>
                                    <ul>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/%E3%80%8AJavascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/">《Javascript高级程序设计》阅读记录</a>(7)</li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FDesignPattern/">设计模式DesignPattern</a>(6)</li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</a>(6)</li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/SQL%E5%A4%AF%E5%AE%9E%E5%9F%BA%E7%A1%80/">SQL夯实基础</a>(5)</li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/C%23%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/">C#进阶之路</a>(5)</li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/C%23%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/">C#面向对象</a>(4)</li>
                                        <li><a href="http://www.cnblogs.com/qixinbo/tag/Javascript%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/">Javascript事件模型</a>(3)</li>
                                    </ul>
                                </div>
                            </div><div id="sidebar_categories">
                                <div id="sidebar_postcategory" class="catListPostCategory sidebar-block">
                                    <h3 class="catListTitle">随笔分类</h3>

                                    <ul>

                                        <li><a id="CatList_LinkList_0_Link_0" href="https://www.cnblogs.com/qixinbo/category/1007682.html">C#(16)</a> </li>

                                        <li><a id="CatList_LinkList_0_Link_1" href="https://www.cnblogs.com/qixinbo/category/1043504.html">Database(6)</a> </li>

                                        <li><a id="CatList_LinkList_0_Link_2" href="https://www.cnblogs.com/qixinbo/category/1007681.html">Javascript(17)</a> </li>

                                        <li><a id="CatList_LinkList_0_Link_3" href="https://www.cnblogs.com/qixinbo/category/1012811.html">WebAndHttp(1)</a> </li>

                                        <li><a id="CatList_LinkList_0_Link_4" href="https://www.cnblogs.com/qixinbo/category/1086024.html">基本功Foundation(19)</a> </li>

                                        <li><a id="CatList_LinkList_0_Link_5" href="https://www.cnblogs.com/qixinbo/category/1012821.html">杂谈(3)</a> </li>

                                    </ul>

                                </div>

                                <div id="sidebar_postarchive" class="catListPostArchive sidebar-block">
                                    <h3 class="catListTitle">随笔档案</h3>

                                    <ul>

                                        <li><a id="CatList_LinkList_1_Link_0" href="https://www.cnblogs.com/qixinbo/archive/2018/06.html">2018年6月 (2)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_1" href="https://www.cnblogs.com/qixinbo/archive/2018/05.html">2018年5月 (2)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_2" href="https://www.cnblogs.com/qixinbo/archive/2018/04.html">2018年4月 (2)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_3" href="https://www.cnblogs.com/qixinbo/archive/2018/03.html">2018年3月 (3)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_4" href="https://www.cnblogs.com/qixinbo/archive/2018/02.html">2018年2月 (3)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_5" href="https://www.cnblogs.com/qixinbo/archive/2018/01.html">2018年1月 (9)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_6" href="https://www.cnblogs.com/qixinbo/archive/2017/12.html">2017年12月 (4)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_7" href="https://www.cnblogs.com/qixinbo/archive/2017/11.html">2017年11月 (5)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_8" href="https://www.cnblogs.com/qixinbo/archive/2017/10.html">2017年10月 (1)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_9" href="https://www.cnblogs.com/qixinbo/archive/2017/09.html">2017年9月 (3)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_10" href="https://www.cnblogs.com/qixinbo/archive/2017/08.html">2017年8月 (7)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_11" href="https://www.cnblogs.com/qixinbo/archive/2017/07.html">2017年7月 (6)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_12" href="https://www.cnblogs.com/qixinbo/archive/2017/06.html">2017年6月 (10)</a> </li>

                                        <li><a id="CatList_LinkList_1_Link_13" href="https://www.cnblogs.com/qixinbo/archive/2017/05.html">2017年5月 (7)</a> </li>

                                    </ul>

                                </div>

                            </div><div id="sidebar_topdiggedposts" class="sidebar-block">
                                <div id="topdigg_posts_wrap">
                                    <div class="catListView">
                                        <h3 class="catListTitle">推荐排行榜</h3>
                                        <div id="TopDiggPostsBlock"><ul><li><a href="https://www.cnblogs.com/qixinbo/p/6938471.html">1. .NET MVC页面生命周期及传统ASP.NET页面周期(1)</a></li><li><a href="https://www.cnblogs.com/qixinbo/p/7346018.html">2. 页面滑动底部自动加载下一页信息(1)</a></li><li><a href="https://www.cnblogs.com/qixinbo/p/7782314.html">3. Hash表的平均查找长度ASL计算方法(1)</a></li></ul></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <script type="text/javascript">loadBlogSideColumn();</script>
                    </div>

                </div><!--end: sideBarMain -->
            </div><!--end: sideBar 侧边栏容器 -->
            <div class="clear"></div>
        </div><!--end: main -->
        <div class="clear"></div>
        <div id="footer">

            <!--done-->
            Copyright ©2018 SeedQi
        </div><!--end: footer -->
    </div><!--end: home 自定义的最大容器 -->


</body>
</html>